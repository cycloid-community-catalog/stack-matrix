---

#
# Server
#
- hosts: tag_role_matrix:&tag_project_{{project}}:&tag_env_{{ env }}:&tag_cycloid_io_true
  become: yes
  serial: 100%

  vars_files:
    - "group_vars/matrix_servers"
    - "environments/default_matrix.yml"
    - [ "environments/{{ env }}-matrix.yml", "environments/empty.yml" ]
    # - [ "environments/{{ env }}-secrets.yml", "environments/empty.yml" ]

  pre_tasks:
    # Symlink are defined for nvme and systemd mount doesnt accept it
    - name: Get the real name of data device, not symlink
      shell: "readlink -f {{ matrix_data_device }}"
      register: data_real_device
      tags:
       - setup-all

    - name: Set real name of data device
      set_fact:
        matrix_data_device: "{{ data_real_device.stdout }}"
      tags:
       - setup-all

    - name: Check if data device need to be initialized
      command: "file -s {{matrix_data_device}} --dereference"
      ignore_errors: True
      register: initiate_volume_device
      failed_when: "'ext4 filesystem data' in initiate_volume_device.stdout"
      tags:
       - setup-all

    - name: Format data device in ext4
      command: "mkfs.ext4 {{matrix_data_device}}"
      when: initiate_volume_device is success
      tags:
       - setup-all

    - import_role:
        name: cycloid.ebs-automatic-nvme-mapping
      tags:
        - setup-all
 
    - import_role:
        name: cycloid.systemd
      vars:
        systemd_type: mount
        systemd_mount_type: ext4
        systemd_mount_device: "{{matrix_data_device}}"
        systemd_mount_mountpoint: "{{matrix_base_data_path}}"
        systemd_mount_options: rw,discard,errors=remount-ro
        systemd_mount_started: true
      tags:
        - setup-all

    - name: Copy SSL certs
      copy:
        src: files/ssl/fullchain.pem
        dest: "{{ item }}"
        # owner: "{{ matrix_user_username }}"
        # group: "{{ matrix_user_groupname }}"
      with_items:
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_matrix }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_element }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_dimension }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_jitsi }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_domain }}/"

      when: matrix_ssl_retrieval_method == "manually-managed"
      tags:
        - setup-all
    
    - name: Copy SSL cert keys
      copy:
        src: files/ssl/privkey.pem
        dest: "{{ item }}"
        # owner: "{{ matrix_user_username }}"
        # group: "{{ matrix_user_groupname }}"
      with_items:
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_matrix }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_element }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_dimension }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_server_fqn_jitsi }}/"
        - "{{ matrix_ssl_config_dir_path }}/live/{{ matrix_domain }}/"

      when: matrix_ssl_retrieval_method == "manually-managed"
      tags:
        - setup-all
    
    - name: Make sure psql if installed
      package:
        name: postgresql-client
        state: present
      tags:
        - setup-all

    - name: Make sure the PostgreSQL database exists
      shell: 
        cmd: echo "SELECT 'CREATE DATABASE {{ matrix_synapse_database_database }} ENCODING \"UTF-8\" LC_COLLATE \"C\" LC_CTYPE \"C\" TEMPLATE template0' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ matrix_synapse_database_database }}')\gexec" | psql postgres
      environment:
        PGHOST: "{{ matrix_synapse_database_host }}"
        PGPORT: "5432"
        PGUSER: "{{ matrix_synapse_database_user }}"
        PGPASSWORD: "{{ matrix_synapse_database_password }}"
      when: not matrix_postgres_enabled
      tags:
        - setup-all
  
  roles:
    - role: cycloid.base-aws
      tags:
        - setup-all

    - role: cycloid-matrix-extra-appservices

    - role: matrix-base
    - role: matrix-mailer
    - role: matrix-postgres
    - role: matrix-corporal
    - role: matrix-bridge-appservice-discord
    - role: matrix-bridge-appservice-slack
    - role: matrix-bridge-appservice-webhooks
    - role: matrix-bridge-appservice-irc
    - role: matrix-bridge-mautrix-facebook
    - role: matrix-bridge-mautrix-hangouts
    - role: matrix-bridge-mautrix-telegram
    - role: matrix-bridge-mautrix-whatsapp
    - role: matrix-bridge-mx-puppet-discord
    - role: matrix-bridge-mx-puppet-steam
    - role: matrix-bridge-mx-puppet-skype
    - role: matrix-bridge-mx-puppet-slack
    - role: matrix-bridge-mx-puppet-twitter
    - role: matrix-bridge-mx-puppet-instagram
    - role: matrix-bridge-sms
    - role: matrix-bot-matrix-reminder-bot
    - role: matrix-synapse
    - role: matrix-synapse-admin
    - role: matrix-client-element
    - role: matrix-jitsi
    - role: matrix-ma1sd
    - role: matrix-dimension
    - role: matrix-email2matrix
    - role: matrix-nginx-proxy
    - role: matrix-coturn
    - role: matrix-common-after

    - role: cycloid.telegraf
      tags:
        - setup-all
        - telegraf
      when: telegraf_install

    - role: cycloid.fluentd
      tags:
        - setup-all
        - fluentd

  tags:
    - matrix
